Deployment node or Dnode:
10.0.0.8 -> Dev used for Ansible deployment

Target nodes or Tnodes:
10.0.0.10 -> Controller eth0-NAT eth1-Int eth2-Empty
10.0.0.15 -> Compute  eth0-NAT eth1-Int
10.0.0.20 -> Storage  eth0-NAT eth1-Int
	     vda 40GB OS with loopbacks 

PreConf:
https://docs.openstack.org/developer/kolla-ansible/quickstart.html

Get Docker and Ansible:

Dnode:

yum install -y python-devel libffi-devel gcc openssl-devel
yum install -y ansible
curl -sSL https://get.docker.io | bash

Tnodes:

curl -sSL https://get.docker.io | bash
mkdir -p /etc/systemd/system/docker.service.d
tee /etc/systemd/system/docker.service.d/kolla.conf <<-'EOF'
[Service]
MountFlags=shared
EOF
systemctl daemon-reload
systemctl restart docker
yum install -y python-docker-py
##Disable libvirt if installed:
#systemctl stop libvirtd.service
#systemctl disable libvirtd.service

SetUp Ntp:

Tnodes:

yum install -y ntp
systemctl enable ntpd.service
systemctl start ntpd.service

Kolla For Deployment:

Dnode:

pip install kolla-ansible
cp -r /usr/share/kolla-ansible/etc_examples/kolla /etc/kolla/
cp /usr/share/kolla-ansible/ansible/inventory/multinode .

Start registry
https://docs.openstack.org/project-deploy-guide/kolla-ansible/ocata/multinode.html

docker run -d \
    --name registry \
    --restart=always \
    -p 5000:5000 \
    -v registry:/var/lib/registry \
    registry:2

Tnodes:
systemctl stop firewalld
systemctl disable firewalld
cat << EOF > /etc/sysconfig/docker
INSECURE_REGISTRY="--insecure-registry 10.0.0.8:5000"
EOF

cat << EOF >> /etc/systemd/system/docker.service.d/kolla.conf
ExecStart=
EnvironmentFile=/etc/sysconfig/docker
ExecStart=/usr/bin/docker daemon \$INSECURE_REGISTRY
EOF

systemctl daemon-reload
systemctl restart docker

STORAGE Node:

SWIFT
https://docs.openstack.org/developer/kolla-ansible/swift-guide.html

#on Storage Node:
Disks with a partition...

index=0
for d in sdc sdd sde; do
    free_device=$(losetup -f)
    fallocate -l 3G /tmp/$d
    losetup $free_device /tmp/$d
    parted $free_device -s -- mklabel gpt mkpart KOLLA_SWIFT_DATA 1 -1
    sudo mkfs.xfs -f -L d${index} ${free_device}p1
    (( index++ ))
done

#loop0 loop1 loop2

#on the Dnode node perform the rest of the steps
#Storage host address
kOLLA_INTERNAL_ADDRESS=10.0.0.20


mkdir -p /etc/kolla/config/swift

...

Object, Accout, Container Rigns Create.


CINDER
https://docs.openstack.org/developer/kolla-ansible/cinder-guide.html
#map sdb dev/loop3
pvcreate /dev/loop3
vgcreate cinder-volumes /dev/loop3

DEPLOY KOLLA:

Dnode:
kolla-genpwd
vi /etc/kolla/passwords.yml
	keystone_admin_password: openstack

vi /etc/kolla/globals

	openstack_release: "4.0.0"
	kolla_internal_vip_address: "10.0.0.244"
	network_interface: "eth1"
	neutron_external_interface: "eth2"
	...
	enable_heat: "yes"
	enable_magnum: "yes"
	enable_swift: "yes"
        enable_cinder: "yes"
	enable_cinder_backend_lvm: "yes"
	...

vi multinode
	[control]
	controller

	[network]
	controller

	[compute]
	compute

	[monitoring]
	controller

	[storage]
	storage

#if compte node returns 0 from egrep -c '(vmx|svm)' /proc/cpuinfo
#do this step on Dnode
mkdir -p /etc/kolla/config/nova
cat << EOF > /etc/kolla/config/nova/nova-compute.conf
[libvirt]
virt_type = qemu
cpu_mode = none
EOF

ssh-keygen
ssh-copy-id root@controller
ssh-copy-id root@compute
ssh-copy-id root@storage

ansible -m ping -i multinode all
kolla-ansible prechecks -i multinode
kolla-ansible deploy -i multinode

POST INSTALL:

kolla-ansible post-deploy
. /etc/kolla/admin-openrc.sh
#pip install python-openstackclient
#map br-ex with eth2 for external access

##NOTES:
#you can add custom config. Ex: you want horizon on all interfaces
mkdir /etc/kolla/config/horizon/
vi /etc/kolla/config/horizon/horizon.conf
Listen 80
...





